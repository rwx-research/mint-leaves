- key: update-leaves-github--gh-cli
  call: github/install-cli 1.0.0

- key: update-leaves-github--jq-cli
  run: |
    sudo apt-get update
    sudo apt-get install -y jq
    sudo apt-get clean

- key: update-leaves-github--test-create
  call: $LEAF_DIGEST
  with:
    repository: https://github.com/rwx-research/mint-update-leaves-testing.git
    ref: main
    github-access-token: ${{ vaults.mint_leaves_development.github-apps.mint-mint-leaves-development.token }}
    label: "mint-leaves-test-${{ run.id }}"
    branch-prefix: "mint-leaves-test/${{ run.id }}/"
    mint-file: tasks.yml

- key: update-leaves-github--test-create--assert
  after: update-leaves-github--test-create
  use: [update-leaves-github--gh-cli, update-leaves-github--jq-cli]
  run: |
    PR_NUMBER="$(gh --repo rwx-research/mint-update-leaves-testing pr list --author '@me' --label "$GITHUB_LABEL" --json number --jq 'max_by(.number) | .number')"
    if [ -z "$PR_NUMBER" ]; then
      >&2 echo "Pull request not found"
      exit 4
    fi
    printf "$PR_NUMBER" > "$MINT_VALUES/pr-number"

    # Check branch name
    branch_name="$(gh --repo rwx-research/mint-update-leaves-testing pr view "$PR_NUMBER" --json headRefName --jq '.headRefName')"
    if [[ "$branch_name" != "$BRANCH_PREFIX"* ]]; then
      >&2 echo "Expected branch name to match \"${BRANCH_PREFIX}*\", but got \"$branch_name\""
      exit 4
    fi

    # Check PR body
    pr_body="$(gh --repo rwx-research/mint-update-leaves-testing pr view "$PR_NUMBER" --json body | jq -r '.body')"
    grep -q "Updated the following leaves" <<< "$pr_body" || { echo "Update header not found" && exit 4; }
    grep -q "mint/install-go 1.0.0 →" <<< "$pr_body" || { echo "Update mint/install-go not found" && exit 4; }
    grep -q "mint/install-node 1.0.0 →" <<< "$pr_body" || { echo "Update mint/install-node not found" && exit 4; }

    # Check PR diff
    pr_diff="$(gh --repo rwx-research/mint-update-leaves-testing pr diff "$PR_NUMBER")"
    grep -q "\-    call: mint/install-go 1.0.0" <<< "$pr_diff" || { echo "Delete install-go 1.0.0 not found" && exit 4; }
    grep -q "+    call: mint/install-go 1." <<< "$pr_diff" || { echo "Add install-go 1.x.x not found" && exit 4; }
    grep -q "\-    call: mint/install-node 1.0.0" <<< "$pr_diff" || { echo "Delete install-node 1.0.0 not found" && exit 4; }
    grep -q "+    call: mint/install-node 1." <<< "$pr_diff" || { echo "Add install-node 1.x.x not found" && exit 4; }

    # Verify no comments (until after update)
    comment_count="$(gh --repo rwx-research/mint-update-leaves-testing pr view "$PR_NUMBER" --json comments | jq '.comments | length')"
    if [ "$comment_count" != "0" ]; then
      echo "PR #${PR_NUMBER} has $comment_count comments, expected 0"
      exit 4
    fi

    commit_count="$(gh --repo rwx-research/mint-update-leaves-testing pr view "$PR_NUMBER" --json commits | jq '.commits | length')"
    if [ "$commit_count" != 1 ]; then
      echo "PR #${PR_NUMBER} has $commit_count commits, expected 1"
      exit 4
    fi
  outputs:
    values: [pr-number]
  env:
    GITHUB_LABEL: mint-leaves-test-${{ run.id }}
    GITHUB_TOKEN: ${{ vaults.mint_leaves_development.github-apps.mint-mint-leaves-development.token }}
    BRANCH_PREFIX: "mint-leaves-test/${{ run.id }}/"

- key: clone-test-repo
  call: mint/git-clone 1.1.14
  with:
    repository: https://github.com/rwx-research/mint-update-leaves-testing.git
    ref: main
    preserve-git-dir: true
    github-access-token: ${{ vaults.mint_leaves_development.github-apps.mint-mint-leaves-development.token }}

- key: update-leaves-github--test--partial-revert
  after: update-leaves-github--test-create--assert
  use: [update-leaves-github--gh-cli, clone-test-repo]
  run: |
    gh --repo rwx-research/mint-update-leaves-testing pr checkout "$PR_NUMBER"

    # Revert the install-go change.
    sed -i -E "s/call: mint\/install-go\s+1.+$/call: mint\/install-go 1.0.0/" tasks.yml

    if git diff --quiet; then
      echo "Unable to make replacement for mint/install-go in tasks.yml"
      exit 4
    fi

    git commit --all -m "Reset changes to install-go for testing."
    git push -u origin "$(git rev-parse --abbrev-ref HEAD)"

    for i in {0..15}; do
      commit_count="$(gh --repo rwx-research/mint-update-leaves-testing pr view "$PR_NUMBER" --json commits | jq '.commits | length')"
      if [ "$commit_count" -eq 2 ]; then
        break
      fi
      sleep 1
    done
    if [ "$commit_count" != 2 ]; then
      echo "PR #${PR_NUMBER} has $commit_count commits, expected 2"
      exit 4
    fi

    # Ensure changes we just made have reset install-go.
    pr_diff="$(gh --repo rwx-research/mint-update-leaves-testing pr diff "$PR_NUMBER")"
    grep -qv "\-    call: mint/install-go 1.0.0" <<< "$pr_diff" || { echo "Found change for mint/install-go when none was expected" && exit 4; }
    # Still have install-node changes.
    grep -q "\-    call: mint/install-node 1.0.0" <<< "$pr_diff" || { echo "Delete install-node 1.0.0 not found" && exit 4; }
    grep -q "+    call: mint/install-node 1." <<< "$pr_diff" || { echo "Add install-node 1.x.x not found" && exit 4; }

    # Later, ensure the update doesn't reset the PR body (since it'll be a partial change).
    gh --repo rwx-research/mint-update-leaves-testing pr edit "$PR_NUMBER" --body "Body reset for testing"
  env:
    GITHUB_TOKEN: ${{ vaults.mint_leaves_development.github-apps.mint-mint-leaves-development.token }}
    PR_NUMBER: ${{ tasks.update-leaves-github--test-create--assert.values.pr-number }}

- key: update-leaves-github--test-update-changes
  after: update-leaves-github--test--partial-revert
  call: $LEAF_DIGEST
  with:
    repository: https://github.com/rwx-research/mint-update-leaves-testing.git
    ref: main
    github-access-token: ${{ vaults.mint_leaves_development.github-apps.mint-mint-leaves-development.token }}
    label: "mint-leaves-test-${{ run.id }}"
    branch-prefix: "mint-leaves-test/${{ run.id }}/"
    mint-file: tasks.yml

- key: update-leaves-github--test-update-changes--assert
  after: ${{ update-leaves-github--test-update-changes.succeeded && update-leaves-github--test-create--assert.succeeded }}
  use: [update-leaves-github--gh-cli, update-leaves-github--jq-cli]
  run: |
    # PR body should not have changes.
    pr_body="$(gh --repo rwx-research/mint-update-leaves-testing pr view "$PR_NUMBER" --json body | jq -r '.body')"
    grep -q "Body reset for testing" <<< "$pr_body" || { echo "PR body has not been reset for testing" && exit 4; }

    for i in {0..15}; do
      commit_count="$(gh --repo rwx-research/mint-update-leaves-testing pr view "$PR_NUMBER" --json commits | jq '.commits | length')"
      if [ "$commit_count" -eq 3 ]; then
          break
      fi
      sleep 1
    done
    if [ "$commit_count" != 3 ]; then
      echo "PR #${PR_NUMBER} has $commit_count commits, expected 3"
      exit 4
    fi

    pr_diff="$(gh --repo rwx-research/mint-update-leaves-testing pr diff "$PR_NUMBER")"
    grep -q "\-    call: mint/install-go 1.0.0" <<< "$pr_diff" || { echo "Delete install-go 1.0.0 not found" && exit 4; }
    grep -q "+    call: mint/install-go 1." <<< "$pr_diff" || { echo "Add install-go 1.x.x not found" && exit 4; }
    grep -q "\-    call: mint/install-node 1.0.0" <<< "$pr_diff" || { echo "Delete install-node 1.0.0 not found" && exit 4; }
    grep -q "+    call: mint/install-node 1." <<< "$pr_diff" || { echo "Add install-node 1.x.x not found" && exit 4; }

    comment_count="$(gh --repo rwx-research/mint-update-leaves-testing pr view "$PR_NUMBER" --json comments | jq '.comments | length')"
    if [ "$comment_count" != "1" ]; then
      echo "PR #${PR_NUMBER} has $comment_count comments, expected 1"
      exit 4
    fi

    # We only reset changes to install-go, so the comment shouldn't include install-node.
    comment_body="$(gh --repo rwx-research/mint-update-leaves-testing pr view "$PR_NUMBER" --json comments | jq -r '.comments[0].body')"
    grep -q "Updated the following leaves" <<< "$comment_body" || { echo "Update header not found" && exit 4; }
    grep -q "mint/install-go 1.0.0 →" <<< "$comment_body" || { echo "Update mint/install-go not found" && exit 4; }
    grep -qv "mint/install-node 1.0.0 →" <<< "$comment_body" || { echo "Update mint/install-node found" && exit 4; }
  env:
    GITHUB_TOKEN: ${{ vaults.mint_leaves_development.github-apps.mint-mint-leaves-development.token }}
    PR_NUMBER: ${{ tasks.update-leaves-github--test-create--assert.values.pr-number }}

- key: update-leaves-github--test-update-no-changes
  after: update-leaves-github--test-update-changes--assert
  call: $LEAF_DIGEST
  with:
    repository: https://github.com/rwx-research/mint-update-leaves-testing.git
    ref: main
    github-access-token: ${{ vaults.mint_leaves_development.github-apps.mint-mint-leaves-development.token }}
    label: "mint-leaves-test-${{ run.id }}"
    branch-prefix: "mint-leaves-test/${{ run.id }}/"
    mint-file: tasks.yml

- key: update-leaves-github--test-update-no-changes--assert
  after: ${{ update-leaves-github--test-update-no-changes.succeeded && update-leaves-github--test-create--assert.succeeded }}
  use: [update-leaves-github--gh-cli, update-leaves-github--jq-cli]
  run: |
    for i in {0..15}; do
      commit_count="$(gh --repo rwx-research/mint-update-leaves-testing pr view "$PR_NUMBER" --json commits | jq '.commits | length')"
      if [ "$commit_count" -eq 3 ]; then
          break
      fi
      sleep 1
    done
    if [ "$commit_count" != 3 ]; then
      echo "PR #${PR_NUMBER} has $commit_count commits, expected 3"
      exit 4
    fi

    comment_count="$(gh --repo rwx-research/mint-update-leaves-testing pr view "$PR_NUMBER" --json comments | jq '.comments | length')"
    if [ "$comment_count" != "1" ]; then
      echo "PR #${PR_NUMBER} has $comment_count comments, expected 1"
      exit 4
    fi
  env:
    GITHUB_TOKEN: ${{ vaults.mint_leaves_development.github-apps.mint-mint-leaves-development.token }}
    PR_NUMBER: ${{ tasks.update-leaves-github--test-create--assert.values.pr-number }}

- key: update-leaves-github--test--cleanup
  use: update-leaves-github--gh-cli
  after: ${{ update-leaves-github--test-update-no-changes--assert.finished }}
  run: |
    PR_NUMBER="$(gh --repo rwx-research/mint-update-leaves-testing pr list --author '@me' --label "$GITHUB_LABEL" --json number --jq 'max_by(.number) | .number')"
    if [ -n "$PR_NUMBER" ]; then
      gh --repo rwx-research/mint-update-leaves-testing pr close "$PR_NUMBER" --delete-branch
    fi

    if gh --repo rwx-research/mint-update-leaves-testing label list --search "$GITHUB_LABEL" | grep -qv "no labels"; then
      gh --repo rwx-research/mint-update-leaves-testing label delete "$GITHUB_LABEL" --yes
    fi
  env:
    GITHUB_LABEL: mint-leaves-test-${{ run.id }}
    GITHUB_TOKEN: ${{ vaults.mint_leaves_development.github-apps.mint-mint-leaves-development.token }}
