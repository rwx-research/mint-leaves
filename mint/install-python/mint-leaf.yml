name: mint/install-python
version: 1.0.6
description: Install Python, a programming language that lets you work quickly and integrate systems more effectively
source_code_url: https://github.com/rwx-research/mint-leaves/tree/main/mint/install-python
issue_tracker_url: https://github.com/rwx-research/mint-leaves/issues

parameters:
  python-version:
    description: "Version of Python to install"
    required: true

tasks:
  - key: install-python
    run: |
      set -eou pipefail

      # ensure we have a python version
      if [ "$PYTHON_VERSION" = "" ]; then
        cat << EOF > $(mktemp "$MINT_ERRORS/error-XXXX")
      Invalid parameters: \`python-version\` must be set.
      EOF
        exit 2
      fi

      # Find the prebuilt Python
      echo "Looking for Python $PYTHON_VERSION..."
      escaped_version=$(echo "$PYTHON_VERSION" | sed "s/\./\\\\./g") # 3.2.2 => 3\.2\.2
      version_line=$(cat $MINT_LEAF_PATH/known-pythons.csv | { grep "^$escaped_version," || test $? = 1; })
      if [[ -z "$version_line" ]]; then
        cat << EOF > $(mktemp "$MINT_ERRORS/error-XXXX")
      Python $PYTHON_VERSION is not available in this version of [mint/install-python](https://cloud.rwx.com/leaves/mint/install-python).
      Try upgrading to the most recent version of this leaf. If the Python version is still not available, [file an issue](https://github.com/rwx-research/mint-leaves/issues/new).
      EOF
        exit 3
      fi
      echo "Found Python $PYTHON_VERSION!"
      sha256sum=$(echo "$version_line" | cut -d, -f2)
      path=$(echo "$version_line" | cut -d, -f3)

      # Download and extract the prebuilt Python
      echo "Downloading Python $PYTHON_VERSION..."
      curl -o layer.tar.gz -fsSL "https://mint-prebuilt-binaries20240129200014482300000001.s3.us-east-2.amazonaws.com/mint/install-python/$path"
      echo "$sha256sum layer.tar.gz" | sha256sum --check --status
      echo "Downloaded Python $PYTHON_VERSION!"

      echo "Applying whiteouts..."
      whiteouts=$(tar -tf layer.tar.gz | { grep -E "(^\.wh\.[^/]+)|(/\.wh\.[^/]+)" || test $? = 1; })

      # whiteout specific files
      non_opaque_whiteouts=$(echo "$whiteouts" | { grep -v ".wh..wh..opq" || test $? = 1; })
      files_to_whiteout=$(echo "$non_opaque_whiteouts" | sed -E "s/^\.wh\.([^/]+)/\1/g" | sed -E "s/\.wh\.([^/]+)/\1/g")
      echo "$files_to_whiteout" | xargs -I{} sudo rm -rf "/{}"

      # whiteout opaque siblings
      opaque_whiteouts=$(echo "$whiteouts" | { grep ".wh..wh..opq" || test $? = 1; } | xargs -I{} dirname {})
      echo "$opaque_whiteouts" | xargs -I{} sudo rm -rf "/{}/..?*" "/{}/.[!.]*" "/{}/*"
      echo "Applied whiteouts!"

      # write the contents to / excluding the whiteout files
      echo "Extracting Python $PYTHON_VERSION..."
      echo "$whiteouts" > exclude.txt
      echo "run/docker.sock" >> exclude.txt
      echo "usr/sbin/docker-init" >> exclude.txt
      sudo tar -C / -xzf layer.tar.gz -X exclude.txt
      echo "Extracted Python $PYTHON_VERSION!"

      # Add pip to PATH
      echo "$HOME/.local/bin" >> "$MINT_ENV/PATH"

      # cleanup
      rm exclude.txt
      rm layer.tar.gz
    env:
      PYTHON_VERSION: ${{ params.python-version }}
