name: mint/git-clone
version: 1.5.1
description: Clone git repositories over ssh or http, with support for Git Large File Storage (LFS)
source_code_url: https://github.com/rwx-research/mint-leaves/tree/main/mint/git-clone
issue_tracker_url: https://github.com/rwx-research/mint-leaves/issues

parameters:
  github-access-token:
    description: "Token to clone from GitHub over HTTPS"
    required: false
  lfs:
    description: Whether to download Git-LFS files
    default: false
  path:
    description: "The relative path within the workspace into which the repository will be cloned"
    default: "./"
  preserve-git-dir:
    description: "Whether or not to preserve the .git directory. Set to true if you want to perform git operations like committing after cloning. Preserving the .git directory will decreaes the likelihood of cache hits when a file filter is not specified."
    default: false
  ref:
    description: "The ref to check out of the git repository"
    required: true
  meta-ref:
    description: "The unresolved name of the ref being checked out (used to set MINT_GIT_REF_NAME). e.g. refs/heads/main or refs/tags/v1.0.0"
    required: false
  repository:
    description: "The url of a git repository."
    required: true
  ssh-key:
    description: "The ssh key to use if cloning over ssh"
    required: false
  fetch-full-depth:
    description: "Whether to use a shallow fetch or a full-depth fetch when the repository is cloned and when not preserving the git directory (when `preserve-git-dir` is true, this parameter has no effect). Typically, setting this to `false` (the default) will result in better cloning performance within Mint. However, for certain large repositories, a full depth fetch may be faster."
    default: false

tasks:
  - key: setup
    run: |
      sudo install $MINT_LEAF_PATH/bin/git-ssh-command /usr/local/bin
      echo "git-ssh-command" >> $MINT_ENV/GIT_SSH_COMMAND
      if [[ -n "$GIT_SSH_KEY" ]]; then
        httpRegex="https?:\/\/"
        if [[ "$CHECKOUT_REPOSITORY" =~ $httpRegex ]]; then
          errorMessage=$(mktemp "$MINT_ERRORS/error-XXXX")
          cat << EOF > $errorMessage
      Invalid parameters: \`repository\` points to an HTTP URL, but \`ssh-key\` was set.

      The current value is \`$CHECKOUT_REPOSITORY\`.
      EOF
          githubRegex="https?:\/\/github.com\/(.*)\/(.*)\.git"
          if [[ $CHECKOUT_REPOSITORY =~ $githubRegex ]]; then
            org="${BASH_REMATCH[1]}"
            repo="${BASH_REMATCH[2]}"

            truncate -s-1 $errorMessage
            echo " Perhaps you meant \`git@github.com:$org/$repo.git\`?" >> $errorMessage
          fi
          exit 2
        fi

        echo -n "" > $MINT_VALUES/credential-helper
      else
        if [[ "$CHECKOUT_REPOSITORY" != http* ]]; then
          errorMessage=$(mktemp "$MINT_ERRORS/error-XXXX")
          cat << EOF > $errorMessage
      Invalid parameters: \`repository\` must point to an HTTP URL if \`ssh-key\` is not set.

      The current value is \`$CHECKOUT_REPOSITORY\`.
      EOF
          githubRegex="git@github.com:(.*)\/(.*).git"
          if [[ $CHECKOUT_REPOSITORY =~ $githubRegex ]]; then
            org="${BASH_REMATCH[1]}"
            repo="${BASH_REMATCH[2]}"

            truncate -s-1 $errorMessage
            echo " Perhaps you meant \`https://github.com/$org/$repo.git\`?" >> $errorMessage
          fi
          exit 2
        fi

        echo "Setting credential.helper to clone using github-access-token"
        echo -n '!bash -c "echo username=x-access-token && echo password=${GITHUB_TOKEN}"' > $MINT_VALUES/credential-helper
      fi
    env:
      GIT_SSH_KEY: ${{ params.ssh-key }}
      CHECKOUT_REPOSITORY: ${{ params.repository }}

  - key: get-latest-sha-for-ref
    use: setup
    run: |
      CREDENTIAL_ARG=""
      if [[ "${CREDENTIAL_HELPER}" != "" ]]; then
        CREDENTIAL_ARG="-c credential.helper='${CREDENTIAL_HELPER}'"
      fi
      CACHE_BUSTER_COMMAND="git $CREDENTIAL_ARG ls-remote \"${CHECKOUT_REPOSITORY}\" \"${CHECKOUT_REF}\""
      LATEST_SHA_CACHE_BUSTER=$(eval $CACHE_BUSTER_COMMAND | awk '{print $1}')
      if [[ $LATEST_SHA_CACHE_BUSTER == "" ]]; then
        LATEST_SHA_CACHE_BUSTER="${CHECKOUT_REF}"
      fi
      echo "Latest SHA for ${CHECKOUT_REF}: ${LATEST_SHA_CACHE_BUSTER}"
      printf "${LATEST_SHA_CACHE_BUSTER}" >> "$MINT_VALUES/latest-sha-cache-buster"
    env:
      GIT_SSH_KEY:
        value: ${{ params.ssh-key }}
        cache-key: excluded
      GITHUB_TOKEN:
        value: ${{ params.github-access-token }}
        cache-key: excluded
      CHECKOUT_REF: ${{ params.ref }}
      CHECKOUT_REPOSITORY: ${{ params.repository }}
      CREDENTIAL_HELPER: ${{ tasks.setup.values.credential-helper }}
    cache: ${{ params.ref =~ '^[0-9a-f]{40}$' }}

  - key: install-lfs
    run: |
      if [[ "${LFS}" != "true" ]]; then
        echo "params.lfs is false; skipping lfs install"
        exit 0
      fi

      sudo apt-get update
      sudo apt-get install git-lfs
      sudo apt-get clean
    env:
      LFS: ${{ params.lfs }}

  - key: git-clone
    use: [setup, install-lfs]
    run: $MINT_LEAF_PATH/bin/git-clone
    env:
      GIT_LFS_SKIP_SMUDGE: 1
      CACHE_BUST: ${{ tasks.get-latest-sha-for-ref.values.latest-sha-cache-buster }}
      GIT_SSH_KEY:
        value: ${{ params.ssh-key }}
        cache-key: excluded
      GITHUB_TOKEN:
        value: ${{ params.github-access-token }}
        cache-key: excluded
      CHECKOUT_PATH: ${{ params.path }}
      CHECKOUT_REF: ${{ params.ref }}
      CHECKOUT_REPOSITORY: ${{ params.repository }}
      META_REF: ${{ params.meta-ref }}
      LFS: ${{ params.lfs }}
      PRESERVE_GIT_DIR: ${{ params.preserve-git-dir }}
      CREDENTIAL_HELPER: ${{ tasks.setup.values.credential-helper }}
      FETCH_FULL_DEPTH: ${{ params.fetch-full-depth }}

  - key: configure-git
    use: [git-clone]
    run: |
      if [[ "${PRESERVE_GIT_DIR}" == "false" ]]; then
        exit 0
      fi
      if [[ -z "$GITHUB_TOKEN" ]]; then
        exit 0
      fi
      cd "${CHECKOUT_PATH}"

      git config credential.helper '!bash -c "echo username=x-access-token && echo password=${GITHUB_TOKEN}"'

      QUERY="query { viewer { databaseId login } }"

      ACCESS_TOKEN_DATA=$(curl \
        -fsSL \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${GITHUB_TOKEN}" \
        -X POST \
        -d "{ \"query\": \"${QUERY}\"}" \
        https://api.github.com/graphql \
      )

      GIT_USERNAME=$(echo $ACCESS_TOKEN_DATA | jq -r '.data.viewer.login')
      ACCESS_TOKEN_ID=$(echo $ACCESS_TOKEN_DATA | jq -r '.data.viewer.databaseId')
      GIT_EMAIL="${ACCESS_TOKEN_ID}+${GIT_USERNAME}@users.noreply.github.com"

      git config user.email $GIT_EMAIL
      git config user.name $GIT_USERNAME
    env:
      CHECKOUT_PATH: ${{ params.path }}
      GITHUB_TOKEN:
        value: ${{ params.github-access-token }}
        cache-key: excluded
      PRESERVE_GIT_DIR: ${{ params.preserve-git-dir }}
