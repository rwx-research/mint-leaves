name: mint/git-clone
version: 1.2.1
description: Clone git repositories over ssh or http, with support for Git Large File Storage (LFS)
source_code_url: https://github.com/rwx-research/mint-leaves/tree/main/mint/git-clone
issue_tracker_url: https://github.com/rwx-research/mint-leaves/issues

parameters:
  github-access-token:
    description: "Token to clone from GitHub over HTTPS"
    required: false
  lfs:
    description: Whether to download Git-LFS files
    default: false
  path:
    description: "The relative path within the workspace into which the repository will be cloned"
    default: "./"
  preserve-git-dir:
    description: "Whether or not to preserve the .git directory. Set to true if you want to perform git operations like committing after cloning. Preserving the .git directory will decreaes the likelihood of cache hits when a file filter is not specified."
    default: false
  ref:
    description: "The ref to check out of the git repository"
    required: true
  meta-ref:
    description: "The unresolved name of the ref being checked out (used to set MINT_GIT_REF_NAME). e.g. refs/heads/main or refs/tags/v1.0.0"
    required: false
  repository:
    description: "The url of a git repository."
    required: true
  ssh-key:
    description: "The ssh key to use if cloning over ssh"
    required: false

tasks:
  - key: setup
    run: |
      sudo install $MINT_LEAF_PATH/bin/git-ssh-command /usr/local/bin
      echo "git-ssh-command" >> $MINT_ENV/GIT_SSH_COMMAND
      if [[ -n "$GIT_SSH_KEY" ]]; then
        echo -n "" > $MINT_VALUES/credentials-arg
      else
        echo "Setting credential.helper to clone using github-access-token"
        echo -n "-c credential.helper='!bash -c \"echo username=x-access-token && echo password=\${GITHUB_TOKEN}\"'" > $MINT_VALUES/credentials-arg
      fi
    env:
      GIT_SSH_KEY: ${{ params.ssh-key }}

  - key: get-latest-sha-for-ref
    use: setup
    run: |
      LATEST_SHA_CACHE_BUSTER=$(git ${{ tasks.setup.values.credentials-arg }} ls-remote ${{ params.repository }} ${{ params.ref }} | awk '{print $1}')
      if [[ $LATEST_SHA_CACHE_BUSTER == "" ]]; then
        LATEST_SHA_CACHE_BUSTER="${{ params.ref }}"
      fi
      echo "Latest SHA for ${{ params.ref }}: ${LATEST_SHA_CACHE_BUSTER}"
      printf "${LATEST_SHA_CACHE_BUSTER}" >> "$MINT_VALUES/latest-sha-cache-buster"
    env:
      GIT_SSH_KEY:
        value: ${{ params.ssh-key }}
        cache-key: excluded
      GITHUB_TOKEN:
        value: ${{ params.github-access-token }}
        cache-key: excluded
    cache: ${{ params.ref =~ '^[0-9a-f]{40}$' }}

  - key: install-lfs
    run: |
      if [[ '${{ params.lfs }}' != 'true' ]]; then
        echo "params.lfs is false; skipping lfs install"
        exit 0
      fi

      sudo apt-get update
      sudo apt-get install git-lfs
      sudo apt-get clean
  - key: git-clone
    use: [setup, install-lfs]
    run: |
      git clone ${{ tasks.setup.values.credentials-arg }} ${{ params.repository }} ${{ params.path }}
      cd ${{ params.path }}

      git checkout ${{ params.ref }}

      commit_sha=$(git rev-parse HEAD | tr -d '\n')
      echo "Checked out git repository at ${commit_sha}"

      if [[ "${{ params.lfs }}" == "true" ]]; then
        git lfs fetch
        git lfs checkout
      fi

      # Set metadata
      printf "%s" "${{ params.repository }}" >> "$MINT_CACHE_KEY_EXCLUDED_ENV/MINT_GIT_REPOSITORY_URL"
      printf "%s" "${{ params.repository }}" | tr ':' '/' | rev | cut -d '/' -f1,2 | rev | sed 's/\.git$//' >> "$MINT_CACHE_KEY_EXCLUDED_ENV/MINT_GIT_REPOSITORY_NAME"
      commit_message=$(git log -n 1 --pretty=format:%B)
      printf "%s" "${commit_message}" >> "$MINT_CACHE_KEY_EXCLUDED_ENV/MINT_GIT_COMMIT_MESSAGE"
      printf "%s" "${commit_sha}" >> "$MINT_CACHE_KEY_EXCLUDED_ENV/MINT_GIT_COMMIT_SHA"

      unresolved_ref=""
      if [[ -n "${{ params.meta-ref }}" ]]; then
        refs_matching_provided_ref=$(git for-each-ref --format="%(refname)" "refs/heads/${{ params.meta-ref }}" "refs/tags/${{ params.meta-ref }}" "${{ params.meta-ref }}" | grep -v refs/remotes)
        unresolved_ref=$(echo "$refs_matching_provided_ref" | head -n 1 | tr -d '\n')

        # also, ensure the meta-ref contains the resolved commit sha
        result=$(git for-each-ref "${unresolved_ref}" --format="%(refname)" --contains "${commit_sha}")
        if [[ -z "${result}" ]]; then
          cat << EOF > $(mktemp "$MINT_ERRORS/error-XXXX")
      The \`meta-ref\` provided does not contain the resolved commit sha.
      EOF
          exit 1
        fi
      elif [[ "${{ params.ref }}" == "${commit_sha}" ]]; then
        refs_with_sha_at_head=$(git for-each-ref | grep -v refs/remotes/ | awk "\$1 ~ /^${commit_sha}/" | awk '{ print $3; }')
        unresolved_ref=$(echo "$refs_with_sha_at_head" | head -n 1 | tr -d '\n')
      else
        refs_matching_provided_ref=$(git for-each-ref --format="%(refname)" "refs/heads/${{ params.ref }}" "refs/tags/${{ params.ref }}" "${{ params.ref }}" | grep -v refs/remotes)
        unresolved_ref=$(echo "$refs_matching_provided_ref" | head -n 1 | tr -d '\n')
      fi

      if [[ -z "${unresolved_ref}" ]]; then
        unresolved_ref="${commit_sha}"
      fi

      if [[ -n "${unresolved_ref}" ]]; then
        printf "%s" "${unresolved_ref}" >> "$MINT_CACHE_KEY_EXCLUDED_ENV/MINT_GIT_REF"
        printf "%s" "${unresolved_ref}" | sed -E 's|refs/[^/]+/||' >> "$MINT_CACHE_KEY_EXCLUDED_ENV/MINT_GIT_REF_NAME"
      fi

      if [[ "${{ params.preserve-git-dir }}" == "false" ]]; then
        rm -rf .git
      fi
    env:
      CACHE_BUST: ${{ tasks.get-latest-sha-for-ref.values.latest-sha-cache-buster }}
      GIT_SSH_KEY:
        value: ${{ params.ssh-key }}
        cache-key: excluded
      GITHUB_TOKEN:
        value: ${{ params.github-access-token }}
        cache-key: excluded

  - key: jq
    run: |
      sudo apt-get update
      sudo apt-get install jq
      sudo apt-get clean
  - key: configure-git
    use: [git-clone, jq]
    run: |
      if [[ "${{ params.preserve-git-dir }}" == "false" ]]; then
        exit 0
      fi
      if [[ -z "$GITHUB_TOKEN" ]]; then
        exit 0
      fi

      git config credential.helper '!bash -c "echo username=x-access-token && echo password=${GITHUB_TOKEN}"'

      QUERY="query { viewer { databaseId login } }"

      ACCESS_TOKEN_DATA=$(curl \
        -fsSL \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${GITHUB_TOKEN}" \
        -X POST \
        -d "{ \"query\": \"${QUERY}\"}" \
        https://api.github.com/graphql \
      )

      GIT_USERNAME=$(echo $ACCESS_TOKEN_DATA | jq -r '.data.viewer.login')
      ACCESS_TOKEN_ID=$(echo $ACCESS_TOKEN_DATA | jq -r '.data.viewer.databaseId')
      GIT_EMAIL="${ACCESS_TOKEN_ID}+${GIT_USERNAME}@users.noreply.github.com"

      git config user.email $GIT_EMAIL
      git config user.name $GIT_USERNAME
    env:
      GITHUB_TOKEN: ${{ params.github-access-token }}
