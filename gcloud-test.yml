tasks:
  - key: cli
    call: google-cloud/install-cli 1.0.3

  - key: auth-login
    use: cli
    run: |
      set -eo pipefail

      credentials_dir="$(mktemp -d)"
      token_source_file="${credentials_dir}/oidc-token.txt"
      credentials_file="${credentials_dir}/credentials.json"

      audience=""
      if [[ -z "$audience" ]]; then
        audience="//iam.googleapis.com/$workload_identity_provider"
      fi

      echo
      echo "Saving OIDC token"
      echo "$oidc_token" > "$token_source_file"
      chmod 0600 "$token_source_file"

      echo
      echo "Building application credentials file"
      credentials_content=$(jq -n \
        --arg audience "$audience" \
        --arg token_source_file "$token_source_file" \
        '{
          "type": "external_account",
          "audience": $audience,
          "subject_token_type": "urn:ietf:params:oauth:token-type:jwt",
          "token_url": "https://sts.googleapis.com/v1/token",
          "credential_source": {
            "file": $token_source_file,
            "format": {
              "type": "text"
            }
          }
        }')

      if [[ -n "$service_account" ]]; then
        echo "Enabling service account impersonation"
        credentials_content=$(echo "$credentials_content" | \
          jq --arg url "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/$service_account:generateAccessToken" \
            '.service_account_impersonation_url = $url')

        if [[ -n "$service_account_token_lifetime_seconds" ]]; then
          echo "Setting service account token lifetime to $service_account_token_lifetime_seconds seconds"
          credentials_content=$(echo "$credentials_content" | \
            jq --arg lifetime "$service_account_token_lifetime_seconds" \
              '.service_account_impersonation += {"token_lifetime_seconds": $lifetime}')
        fi
      fi

      echo "$credentials_content" >"$credentials_file"
      chmod 0600 "$credentials_file"

      echo "$credentials_file" >> "${MINT_ENV}/GOOGLE_APPLICATION_CREDENTIALS"
      export GOOGLE_APPLICATION_CREDENTIALS="$credentials_file"

      echo
      echo "Authenticating with gcloud"

      gcloud auth login --cred-file="$GOOGLE_APPLICATION_CREDENTIALS"
      echo "Authenticated with gcloud"

      if [[ -n "$project_id" ]]; then
        echo
        echo "Configuring gcloud project"
        gcloud config set project "$project_id"
        echo "Using project: $(gcloud config get project)"
      fi
    cache: false
    env:
      oidc_token: ${{ vaults.mint_leaves_google_cloud_auth_testing.oidc.gcp }}
      workload_identity_provider: ${{ vaults.mint_leaves_google_cloud_auth_testing.secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      service_account: ${{ vaults.mint_leaves_google_cloud_auth_testing.secrets.GCP_SERVICE_ACCOUNT }}
      service_account_token_lifetime_seconds: 63

  - key: test
    use: auth-login
    run: mint-breakpoint
