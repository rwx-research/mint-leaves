name: google-cloud/auth-oidc
version: 1.0.2
description: Authenticate to Google Cloud with OIDC and Workload Identity Federation
source_code_url: https://github.com/rwx-research/mint-leaves/tree/main/google-cloud/auth-oidc
issue_tracker_url: https://github.com/rwx-research/mint-leaves/issues

parameters:
  oidc-token:
    description: "The OIDC token that will be exchanged for temporary credentials (e.g. vaults.your-vault.oidc.your-token)"
    required: true
  workload-identity-provider:
    description: "The full identifier of the Workload Identity Provider"
    required: true
  service-account:
    description: "The identifier of the Google Cloud service account which will be impersonated by the generated OIDC"
    required: false
  audience:
    description: "The generated token's `aud` parameter, defaults to the value of `workload-identity-provider`"
    required: false
  project-id:
    description: "The default project to select once authenticated"
    required: false

tasks:
  - key: require-gcloud
    run: |
      if ! command -v gcloud &> /dev/null; then
        cat << 'EOF' > $(mktemp "$MINT_ERRORS/error-XXXX")
      The Google Cloud CLI (gcloud) must be installed. To install it, you can use the `google-cloud/install-cli` leaf.
      EOF
        exit 2
      fi
    filter: []

  - key: ensure-jq
    use: []
    run: |
      if ! command -v jq &> /dev/null; then
        sudo apt-get update
        sudo apt-get install -y jq
        sudo apt-get clean
      fi
    filter: []

  - key: auth-login
    use: ensure-jq
    after: require-gcloud
    run: |
      set -ueo pipefail

      credentials_dir="$(mktemp -d)"
      token_source_file="${credentials_dir}/oidc-token.txt"
      credentials_file="${credentials_dir}/credentials.json"

      audience="${{ params.audience }}"
      if [[ -z "$audience" ]]; then
        audience="//iam.googleapis.com/${{ params.workload-identity-provider }}"
      fi

      echo
      echo "Saving OIDC token"
      echo "${{ params.oidc-token }}" > "$token_source_file"
      chmod 0600 "$token_source_file"

      echo
      echo "Building application credentials file"
      credentials_content=$(jq -n \
        --arg audience "$audience" \
        --arg token_source_file "$token_source_file" \
        '{
          "type": "external_account",
          "audience": $audience,
          "subject_token_type": "urn:ietf:params:oauth:token-type:jwt",
          "token_url": "https://sts.googleapis.com/v1/token",
          "credential_source": {
            "file": $token_source_file,
            "format": {
              "type": "text"
            }
          }
        }')

      if [[ -n "${{ params.service-account }}" ]]; then
        echo "Enabling service account impersonation"
        credentials_content=$(echo "$credentials_content" | \
          jq --arg url "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${{ params.service-account }}:generateAccessToken" \
            '.service_account_impersonation_url = $url')
      fi

      echo "$credentials_content" >"$credentials_file"
      chmod 0600 "$credentials_file"

      echo "$credentials_file" >> "${MINT_ENV}/GOOGLE_APPLICATION_CREDENTIALS"
      export GOOGLE_APPLICATION_CREDENTIALS="$credentials_file"

      echo
      echo "Authenticating with gcloud"

      gcloud auth login --cred-file="$GOOGLE_APPLICATION_CREDENTIALS"
      echo "Authenticated with gcloud"

      if [[ -n "${{ params.project-id }}" ]]; then
        echo
        echo "Configuring gcloud project"
        gcloud config set project "${{ params.project-id }}"
        echo "Using project: $(gcloud config get project)"
      fi
    cache: false
