### required init properties
### init:
###  python-version: string

# this intentionally shares an id with Ruby, these generate tons of logs
concurrency-pools:
  - id: rwx-research/mint-leaves:binary-builder
    capacity: 20
    on-overflow: queue

tasks:
  - key: lookup-versions
    run: |
      MAJOR_MINOR=$(echo ${{ init.python-version }} | cut -d '.' -f 1,2)
      JSON=$(curl -s https://raw.githubusercontent.com/docker-library/python/master/versions.json)
      SETUPTOOLS_VERSION=$(echo $JSON | jq -r --arg version "$MAJOR_MINOR" '.[$version]["setuptools"]["version"]')
      echo "setuptools version: $SETUPTOOLS_VERSION"

      echo $SETUPTOOLS_VERSION > $MINT_VALUES/setuptools-version

  - key: install-python
    timeout-minutes: 20
    agent:
      cpus: 32
      memory: 128gb
    run: |
      # install dependencies
      libc_version=$(dpkg-query -W -f='${Version}' libc6)
      sudo apt-get update
      sudo apt-get install \
        ca-certificates \
        dpkg-dev \
        gcc \
        gnupg \
        libbluetooth-dev \
        libbz2-dev \
        libc6-dev=${libc_version} \
        libdb-dev \
        libexpat1-dev \
        libffi-dev \
        libgdbm-dev \
        liblzma-dev \
        libncursesw5-dev \
        libreadline-dev \
        libsqlite3-dev \
        libssl-dev \
        make \
        netbase \
        tk-dev \
        tzdata \
        uuid-dev \
        wget \
        xz-utils \
        zlib1g-dev
      sudo apt-get clean

      # download python
      wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"
      wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"
      GNUPGHOME="$(mktemp -d)"
      export GNUPGHOME
      gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys \
        A035C8C19219BA821ECEA86B64E628F8D684696D \
        E3FF2839C048B25C084DEBE9B26995E310250568 \
        7169605F62C751356D054A26A821E680E5FA6305 \
        0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D \
        97FC712E4C024BBEA48A61ED3A5CA953F73C700D
      gpg --batch --verify python.tar.xz.asc python.tar.xz
      gpgconf --kill all
      rm -rf "$GNUPGHOME" python.tar.xz.asc

      # install python
      mkdir -p python-src
      sudo tar --extract --directory python-src --strip-components=1 --file python.tar.xz
      rm python.tar.xz

      pushd python-src
      gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"
      sudo ./configure \
        --build="$gnuArch" \
        --enable-loadable-sqlite-extensions \
        --enable-optimizations \
        --enable-option-checking=fatal \
        --enable-shared \
        --with-lto \
        --with-system-expat \
        --with-ensurepip

      nproc="$(nproc)"
      EXTRA_CFLAGS="$(dpkg-buildflags --get CFLAGS)"
      LDFLAGS="$(dpkg-buildflags --get LDFLAGS)"
      LDFLAGS="${LDFLAGS:--Wl},--strip-all"
      sudo make -j "$nproc" \
        "EXTRA_CFLAGS=${EXTRA_CFLAGS:-}" \
        "LDFLAGS=${LDFLAGS:-}" \
        "PROFILE_TASK=${PROFILE_TASK:-}"

      sudo rm python
      sudo make -j "$nproc" \
        "EXTRA_CFLAGS=${EXTRA_CFLAGS:-}" \
        "LDFLAGS=${LDFLAGS:--Wl},-rpath='\$\$ORIGIN/../lib'" \
        "PROFILE_TASK=${PROFILE_TASK:-}" \
        python
      sudo make install

      popd
      sudo rm -rf python-src

      sudo find /usr/local -depth \
        \( \
          \( -type d -a \( -name test -o -name tests -o -name idle_test \) \) \
          -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name 'libpython*.a' \) \) \
        \) -exec rm -rf '{}' + \
      ;

      sudo ldconfig

      python3 --version
      pip3 --version

      for src in idle3 pydoc3 python3 pip3 python3-config; do \
        dst="$(echo "$src" | tr -d 3)"
        [ -s "/usr/local/bin/$src" ]; \
        if [ ! -e "/usr/local/bin/$dst" ]; then
          sudo ln -svT "$src" "/usr/local/bin/$dst"
        fi
      done

      python --version
      pip --version

      if [[ $PYTHON_SETUPTOOLS_VERSION != "null" ]]; then
      	pip install \
      	  --disable-pip-version-check \
      	  --no-cache-dir \
      	  --no-compile \
          setuptools==$PYTHON_SETUPTOOLS_VERSION \
          wheel
      fi
    env:
      PYTHON_SETUPTOOLS_VERSION: ${{ tasks.lookup-versions.values.setuptools-version }}
      PYTHON_VERSION: ${{ init.python-version }}

  - key: layer-details
    after: install-python
    timeout-minutes: 3
    run: |
      terminal=false
      response=""

      while [[ "$terminal" == "false" ]]; do
        response=$(
          curl -fsSL "https://cloud.rwx.com/mint/api/unstable/tasks/${{ tasks.install-python.id }}/layer" \
            -H "Authorization: Bearer $RWX_ACCESS_TOKEN" \
            -H "X-RWX-Acknowledge-Unstable: true"
        )
        terminal=$(echo "$response" | jq -r '.in_terminal_state')
        if [[ "$terminal" == "false" ]]; then
          sleep 5
        fi
      done

      has_layer=$(echo "$response" | jq -r '.layer != null')
      if [[ "$has_layer" == "false" ]]; then
        cat << EOF > $(mktemp "$MINT_ERRORS/error-XXXX")
      Missing layer in $response for task ${{ tasks.install-python.id }}
      EOF
        exit 1
      fi

      id=$(echo "$response" | jq -r '.layer.id')
      printf "${id}" >> "$MINT_VALUES/id"
    env:
      RWX_ACCESS_TOKEN: ${{ vaults.mint_leaves_binary_builder.secrets.RWX_ACCESS_TOKEN }}

  - key: aws-cli
    call: aws/install-cli 1.0.2

  - key: builder-role
    use: aws-cli
    after: layer-details
    call: aws/assume-role 1.1.4
    with:
      oidc-token: ${{ vaults.mint_leaves_binary_builder.oidc.aws_token }}
      region: us-east-2
      role-to-assume: ${{ vaults.mint_leaves_binary_builder.secrets.ROLE_TO_ASSUME }}

  - key: upload-layer
    use: builder-role
    after: layer-details
    run: |
      source "$MINT_UTILS"
      aws s3 cp "s3://${LAYER_STORE}/${LAYER_ID}.tar" ./layer.tar

      hash=$(sha256sum layer.tar | awk '{ print $1 }')
      leaf="mint/install-python"
      os_key="$(mint_keyify $(mint_os_name) $(mint_os_version))"
      binaryPath="pythons/${{ init.python-version }}/${os_key}-$(mint_arch)-$hash.tar"

      aws s3 cp ./layer.tar "s3://mint-prebuilt-binaries20240129200014482300000001/${leaf}/${binaryPath}"

      echo "Add the following to known-pythons.csv:"
      echo "${{ init.python-version }},${hash},${binaryPath}" | tee $MINT_VALUES/known-python
    env:
      LAYER_STORE: ${{ vaults.mint_leaves_binary_builder.secrets.LAYER_STORE }}
      LAYER_ID: ${{ tasks.layer-details.values.id }}
      MINT_UTILS: ${{ run.mint-dir }}/mint-utils.sh
